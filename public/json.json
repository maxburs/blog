{
    "version": "https://jsonfeed.org/version/1",
    "title": "Max's Blog",
    "home_page_url": "https://maxburson.com",
    "feed_url": "https://maxburson.com/json",
    "author": {
        "name": "Maxwell Burson"
    },
    "items": [
        {
            "id": "gatsby-vs-next-js-blog-starters-showdown",
            "content_html": "<p>Yesterday I switched from using Gatsby to generate my blog to Next.js. I had forked <a href=\"https://github.com/gatsbyjs/gatsby-starter-blog\">Gatsby's blog starter</a>, and just forked Next.js's <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\">blog-starter-typescript</a> example. Here I'll narrate my experience with both of them, and pit them against each other in a blog-on-blog showdown!</p>\n<h2>TLDR</h2>\n<p>Gatsby's more barebones approach to styling and layout match my taste better than Next.js's more filled-in blog template. Gatsby's plugins make it easy to add functionality, and Next.js doesn't have anything comparable. I'd recommend Gatsby to people picking between the two, but I'm not reverting my switch to Next.js any time soon.</p>\n<h2>Gatsby</h2>\n<p><a href=\"https://gatsby-starter-blog-demo.netlify.app/\">https://gatsby-starter-blog-demo.netlify.app/</a></p>\n<p>It was real easy to get started with Gatsby. I felt comfortable deploying the starter mostly it as-is, and the plugins made it real easy to add functionality. I used the <a href=\"https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/?=prismjs\">gatsby-remark-prismjs</a> plugin to add syntax highlighting to my code blocks.</p>\n<p>The starter wasn't 100% to my liking though. To understand everything in the starter you need to know GraphQL, which I don't. I opted to ignore the query under each page and pray they didn't break.</p>\n<p>I also really wanted types, which wasn't included out of the box. I was able to add TypeScript types to the JavaScript code easily enough, but much of the logic is in the plugins and GraphQL, so I didn't end up with much type coverage.</p>\n<h2>Next.js</h2>\n<p><a href=\"https://next-blog-starter.now.sh/\">https://next-blog-starter.now.sh/</a></p>\n<p>Next.js's starter blog needed more tweaks before I was ready to use it. The most glaring issue was that the example wouldn't start.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">next\nready - started server on http://localhost:3000\nerror - ./styles/index.css (./node_modules/css-loader/dist/cjs.js??ref--5-oneOf-6-1!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ref--5-oneOf-6-2!./styles/index.css)\nError: PostCSS plugin postcss-nested requires PostCSS 8.</code></pre></div>\n<p>The starter looks to be make for a blog with multiple contributors, meaning I had to delete a bunch of stuff, and it is missing and RSS feed. (Although it does have have <a href=\"https://github.com/vercel/next.js/blob/85bd4a9ccba6def894f01df3fa9ef2f4e2e05d99/examples/blog-starter-typescript/components/meta.tsx#L34\">a link to a RSS feed in its head</a> ü§î)</p>\n<p>Adding code block syntax highlighting was a real hassle. Maybe I just don't know what to search for? I Eventually I ended up looking through the source code for <a href=\"https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/?=prismjs\">gatsby-remark-prismjs</a>, and didn't see anything Gatsby specific. In fact, it's not Gatsby-not-specific enough that <a href=\"https://github.com/maxburs/blog/blob/ae76c5e772325c513db474e93ef78251377a0825/lib/markdownToHtml.ts\">I was able to use it with Next.js</a>! The only price I appear to be paying is a new warning on <code class=\"language-text\">yarn install</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">warning &quot; &gt; gatsby-remark-prismjs@3.10.0&quot; has unmet peer dependency &quot;gatsby@^2.0.0&quot;.</code></pre></div>\n<p>You think they'd take a pull request to remove the Gatsby dependency? ü§î</p>\n<p>Out of the box Tailwind CSS is used for styling. Tailwind had been getting a lot of good press recently, so it seems like a good choice? if I didn't already have styles from the Gatsby version of my blog I likely would have kept it around.</p>\n<h2>Pros and Cons</h2>\n<h3>Gatsby</h3>\n<ul>\n<li>üëç Out of the box the template was a good fit for my needs</li>\n<li>üëç Rich plugin ecosystem makes it easy to enhance your blog with new functionality</li>\n<li>üëé Requires learning GraphQL to take full advantage of its capabilities</li>\n<li>üëé No out-of-the-box TypeScript option</li>\n<li>ü§∑‚Äç‚ôÇÔ∏è <a href=\"https://github.com/kyleamathews/typography.js/\">Typography.js</a> is used for styles out of the box</li>\n</ul>\n<h3>Next.js</h3>\n<ul>\n<li>üëç Both JavaScript and TypeScript variations</li>\n<li>üëé Doesn't have anything to match Gatsby's rich plugin ecosystem</li>\n<li>üëç <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\">getStaticProps</a> makes it easy to use existing Node knowledge to add data non-javascript stuff built time</li>\n<li>üëç <a href=\"https://www.tailwindapp.com/\">Tailwind CSS</a> is used for styles out of the box</li>\n<li>üëé I got a build error when starting the example for the first time</li>\n</ul>\n",
            "url": "https://maxburson.com/posts/gatsby-vs-next-js-blog-starters-showdown",
            "title": "Gatsby vs Next.js: Blog Starters Showdown ‚öîÔ∏è",
            "summary": "Yesterday I switched from using Gatsby to generate my blog to Next.js. ... Here I'll narrate my experience with both of them, and pit them against each other in a blog-on-blog showdown!",
            "date_modified": "2021-01-02T00:00:00.000Z"
        },
        {
            "id": "ftfm-more",
            "content_html": "<p>TLDR: Read Stack Overflow less, and your language or library‚Äôs docs more.</p>\n<h2>Reasons to RTFM</h2>\n<ul>\n<li>Less likely to be outdated</li>\n<li>Less likely to be incorrect</li>\n<li>Provides more context</li>\n<li>Documentation gets easier to read the more time is spent with it</li>\n<li>You‚Äôre learning while you‚Äôre searching</li>\n</ul>\n<p>It's easy to get in a habit of immediately looking up ready-made solutions; never slowing down to more deeply understand our problems, and our tools. Not only can ready-made solutions create shallow knowledge, total time spend can be longer if few people have had the same problem, or if we're not knowledgeable enough to know what to look for.</p>\n<p>Stack Overflow is still great, but it‚Äôs not the first resource I would reach for.</p>\n<h2>More great reading material</h2>\n<ul>\n<li>Source code: Will make you a better developer</li>\n<li>Patch notes: May have better information on the latest features than the docs</li>\n<li>Repo issues: The best way to find solutions to project/library specific problems</li>\n</ul>\n",
            "url": "https://maxburson.com/posts/ftfm-more",
            "title": "RTFM More",
            "summary": "Read Stack Overflow less, and your language or library‚Äôs docs more",
            "date_modified": "2020-11-07T00:00:00.000Z"
        },
        {
            "id": "switch-object-pattern-with-typescript",
            "content_html": "<h2>The switch => object pattern is great</h2>\n<p>I'm a huge fan of the JavaScript pattern where one replaces a switch:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'goblins_are_coming'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">repelMonsters</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'family_is_coming'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">stockFridge</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>with an object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> eventHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  goblins_are_coming<span class=\"token operator\">:</span> repelMonsters<span class=\"token punctuation\">,</span>\n  family_is_coming<span class=\"token operator\">:</span> stockFridge<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The second method really shines when we don't want to specify the kinds of events we are handling in the same file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> familyEventHandlers <span class=\"token keyword\">from</span> <span class=\"token string\">'./familyEventHandlers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">const</span> eventHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  goblins_are_coming<span class=\"token operator\">:</span> repelMonsters<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>familyEventHandlers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>The pattern doesn't work in TypeScript very well</h2>\n<p>Assume this is written above the rest of the TypeScript examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">GoblinEvent</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">'goblins_are_coming'</span><span class=\"token punctuation\">;</span>\n  smell<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FamilyEvent</span> <span class=\"token punctuation\">{</span>\n  kind<span class=\"token operator\">:</span> <span class=\"token string\">'family_is_coming'</span><span class=\"token punctuation\">;</span>\n  notice<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">OurEvent</span> <span class=\"token operator\">=</span> GoblinEvent <span class=\"token operator\">|</span> FamilyEvent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">repelMonsters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> GoblinEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stockFridge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FamilyEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TypeScript plays fine with the first JavaScript example.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> FamilyEvent <span class=\"token operator\">|</span> GoblinEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'goblins_are_coming'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">repelMonsters</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'family_is_coming'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">stockFridge</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But can't make sense of the second one.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> eventHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  goblins_are_coming<span class=\"token operator\">:</span> repelMonsters<span class=\"token punctuation\">,</span>\n  family_is_coming<span class=\"token operator\">:</span> stockFridge<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> OurEvent<span class=\"token punctuation\">;</span>\n\neventHandlers<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This ‚òù produces this üëá error message.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Argument of type &#39;OurEvent&#39; is not assignable to parameter of type &#39;GoblinEvent &amp; FamilyEvent&#39;.\n  Type &#39;GoblinEvent&#39; is not assignable to type &#39;GoblinEvent &amp; FamilyEvent&#39;.\n    Property &#39;notice&#39; is missing in type &#39;GoblinEvent&#39; but required in type &#39;FamilyEvent&#39;.ts(2345)\n</code></pre></div>\n<h2>Here's the great (terrible?) hack to make it work</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">handle</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> OurEvent<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kind'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span>\n  stuff<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>arg0<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stuff<span class=\"token punctuation\">[</span>payload<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> eventHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>No type errors! üéä</p>\n<p>... but with a catch.</p>\n<p>This works because the interface is still generic when accessed. To keep this compiling, the object must preserve it's mapped typings as long as the event is generic.</p>\n<p>That is to say, the following produces a type error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">handleWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> OurEvent<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>payload<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> eventHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>TLDR:</h2>\n<p>Check this out:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">handle</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> OurEvent<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">[</span><span class=\"token string\">'kind'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">,</span>\n  stuff<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>arg0<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stuff<span class=\"token punctuation\">[</span>payload<span class=\"token punctuation\">.</span>kind<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n",
            "url": "https://maxburson.com/posts/switch-object-pattern-with-typescript",
            "title": "Making the switch => object Pattern Work in TypeScript",
            "summary": "Where I come to terms with TypeScript not being perfect",
            "date_modified": "2019-10-08T00:00:00.000Z"
        },
        {
            "id": "cross-component-promises",
            "content_html": "<p>Promises and async/await are awesome and should be used more often in the front end. I rarely see them getting used for anything besides ajax and that's a shame. I'll provide a short (contrived) example of a problem that can be simplified by using promises.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">seriousBusinessLogic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pickAColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> favorite <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">pickAColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pick your favorite'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'steelblue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'darkgoldenrod'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'olivedrab'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> leastFavorite <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">pickAColor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Please pick your least favorite of these colors'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'aquamarine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'darksalmon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rebeccapurple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You picked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>favorite<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>leastFavorite<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<style>\n  .codepen {\n    margin-bottom: 1.5em;\n    margin-left: -16px;\n    margin-right: -16px;\n    width: calc(100% + 32px);\n  }\n</style>\n<iframe class=\"codepen\" height=\"265\"  scrolling=\"no\" title=\"Promises are Great blog post example\" src=\"https://codepen.io/genuine_smiles/embed/rbNOWO?height=265&theme-id=dark&default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/genuine_smiles/pen/rbNOWO'>Promises are Great blog post example</a> by Maxwell Burson\n  (<a href='https://codepen.io/genuine_smiles'>@genuine_smiles</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>The most immediate benefit is not splitting the above code into multiple parts. We can keep the dispatching logic and the resulting effects in the same block as they should be; as well as chaining multiple requests together easily and naturally.</p>\n<p>Promises also let us keep this business logic hidden inside of a component when we need to call into outside components to get our answer. Suppose this question could be best answered using the ui of an already mounted component, and this was a regular callback that didn't return a promise. The component that needs the question answered would need to set a flag inside of itself and then wait for the answer to come down as a prop. <em>But</em>, other components that ask the same question may also receive the prop, and because the answer is stateful we would need to call another callback to clear the answer prop.</p>\n<p>This could all be avoided by moving all this logic and state into a higher component, but, that defeats our original goal of isolation. On the other hand, if the question can be answered by a modal inside of the current class we should likely just do that.</p>\n<p>I've used this trick successfully in these situations:</p>\n<ul>\n<li>The question was being asked a <em>lot</em>. We could just render a modal in the current context whenever we need to and be done with it; but creating a service to answer a frequent question saves a large amount of time.</li>\n<li>The question could only be answered by other components. Other components need to be interacted with by the user to get the question answered or other components have state inside of them that we don't want to pass around.</li>\n</ul>\n",
            "url": "https://maxburson.com/posts/cross-component-promises",
            "title": "Cross Component Promises",
            "summary": "Async cross component communication can be easily (ish) achieved without breaking component data flow rules",
            "date_modified": "2018-03-31T00:00:00.000Z"
        }
    ]
}